Let's think about the data we will need to expose in order to build our app. Our app needs to:

    - Fetch all upcoming rocket launches
    - Fetch a specific launch by its ID
    - Login the user
    - Book launch trips if the user is logged in
    - Cancel launch trips if the user is logged in


Space-X v2 REST API: (start > server > src > datasource > launch.js)
    - $ npm install apollo-datasource-rest --save
    - package exposes the RESTDataSource class that is responsible for fetching data from a REST API
    - to build a data source for a REST API, extend the RESTDataSource class and define this.baseURL
    - Apollo RESTDataSource also sets up an in-memory cache that caches responses from our REST resources w/ no addtl set up --> "partial query caching"


Resolvers file:
    - The resolvers code show the resolver functions for the Query type fields: launches, launch, and me
    - The first argument to our top-level resolvers, parent, is always blank because it refers to the root of our graph
    - The second argument refers to any arguments passed into our query, which we use in our launch query to fetch a launch by its id
    - Finally, we destructure our data sources from the third argument, context, in order to call them in our resolvers
    - Our resolvers are simple and concise because the logic is embedded in the LaunchAPI and UserAPI data sources
    - We recommend keeping your resolvers thin as a best practice, which allows you to safely refactor without worrying about breaking your API


Practice Queries in Playground:
    query GetLaunches {
        launches {
            id
            mission {
                name
            }
        }
    }

    query GetLaunchById {
        launch(id: 60) {
            id
            rocket {
                id
                type
            }
        }
    }


Pagination (schema.js):
    - Now, the launches query takes in two parameters, pageSize and after, and returns a LaunchConnection. 
    - The LaunchConnection type returns a result that shows the list of launches, in addition to a cursor field that keeps track of where we are in the list and a hasMore field to indicate if there's more data to be fetched.


Practice Query with Pagination:
    query GetLaunches {
        launches(pageSize: 3) {
            launches {
                id
                mission {
                    name
                }
            }
        }
    }


Steps for Authentication:
    1. The context function on your ApolloServer instance is called with the request object each time a GraphQL operation hits your API. Use this request object to read the authorization headers.

    2. Authenticate the user within the context function.
    
    3. Once the user is authenticated, attach the user to the object returned from the context function. This allows us to read the user's information from within our data sources and resolvers, so we can authorize whether they can access the data.

    -- code:
    - we're checking the authorization headers on the request
    - authenticating the user by looking up their credentials in the database
    - and attaching the user to the context
    - While we definitely don't advocate using this specific implementation in production since it's not secure, all of the concepts outlined here are transferable to how you'll implement authentication in a real world application.

Practice Query for Authentication/Login:
    mutation LoginUser {
        login(email: "daisy@apollographql.com")
    }

    # returned: "ZGFpc3lAYXBvbGxvZ3JhcGhxbC5jb20="

Practice Query for Booking:
    mutation BookTrips {
        bookTrips(launchIds: [67, 68, 69]) {
            success
            message
            launches {
                id
            }
        }
    }

################# DEPLOY TO PRODUCTION

Engine API Key:
    - Format: 
    - ENGINE_API_KEY=service:<your-service-name>:<hash-from-apollo-engine>

Check and publish with the Apollo CLI
    - It's time to publish our schema to Graph Manager! First, start your server in one terminal window by running npm start. 
    - In another terminal window, run:
    - $ npx apollo service:push --endpoint=http://localhost:4000

    - This command publishes your schema to the Apollo registry. 
    - Once your schema is uploaded, you should be able to see your schema in the Apollo Graph Manager explorer. 
    - In future steps, we will pull down our schema from Graph Manager in order to power the Apollo VSCode extension.
    - For subsequent publishes, we may first want to check for any breaking changes in our new schema against the old version. In a terminal window, run:
    - $ npx apollo service:check --endpoint=http://localhost:4000
    - then run the $ ... push --endpoint= command


################# CLIENT
    - install: apollo-client, react-apollo, graphql-tag
    - copy the env file from /server to /client
    - paste the following config in apollo.config.js:
    module.exports = {
        client: {
            name: 'Space Explorer [web]',
            service: 'space-explorer',
        },
    };


    - Query Data using Vanilla JS
    - first import gql:
    - import gql from "graphql-tag";
    client
  .query({
    query: gql`
      query GetLaunch {
        launch(id: 56) {
          id
          mission {
            name
          }
        }
      }
    `
  })
  .then(result => console.log(result));



useQuery: Fetching List
    - import useQuery from @apollo/react-hooks
    - pass query wrapped with gql in as first param
    - wire comp up to use the loading, data, and error props on the result object to render UI